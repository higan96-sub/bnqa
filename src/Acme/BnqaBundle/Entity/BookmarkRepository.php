<?php

namespace Acme\BnqaBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;
use Acme\BnqaBundle\Item\AmazonItemManager;
use Acme\BnqaBundle\Item\AmazonItem;
use Acme\BnqaBundle\Entity\User;
use Acme\BnqaBundle\Entity\Bookmark;

/**
 * BookmarkRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BookmarkRepository extends EntityRepository
{
    public function findForLine($asinCode, $bookPage, $controller, $page, $user_id, $target_user_id)
    {
        $limit = 20;
        $offset = $page * $limit;


        $sql = "SELECT
   r.id,u.username,u.profile_img_url,r.asin_code,i.img_url,i.title,i.product_group,t.name AS typeName,t.label AS typeLabel,rm.reply_to_id,ru.username AS reply_to_username,r.page,r.created_at,r.body,1 AS isBookmarked,m.wrong_body
   FROM report_bookmark b
   JOIN report r ON b.report_id = r.id
   JOIN type t ON r.type_id = t.id
   JOIN fos_user u ON r.user_id = u.id
   JOIN item i ON r.item_id = i.id
   LEFT JOIN misprint m ON r.misprint_id = m.id
   LEFT JOIN reply_mapping rm ON r.id = rm.reply_id
   LEFT JOIN fos_user ru ON rm.user_id = ru.id
   WHERE b.user_id = :user_id
   ";
        $where = '';
        switch ($controller) {
            case 'item':
                $where = " AND r.asin_code = :asin_code ";
                if ($bookPage > 0) {
                    $where .= " AND r.page = :book_page ";
                }
                break;
            case 'user':
                $where = " AND r.user_id = :target_user_id ";
                break;
            default:
                break;
        }

        $sql .= $where . " ORDER BY b.created_at DESC LIMIT " . $limit . " OFFSET " . $offset;
        $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
        $stmt->bindValue(':user_id', $user_id);
        switch ($controller) {
            case 'item':
                $stmt->bindValue(':asin_code', $asinCode);
                if ($bookPage > 0) {
                    $stmt->bindValue(':book_page', $bookPage);
                }
                break;
            case 'user':
                $stmt->bindValue(':target_user_id', $target_user_id);
                break;
            default:
                break;
        }

        $stmt->execute();

        return $stmt->fetchAll();

    }


    /**
     * @var array
     */
    private $type = array(
        'user',
        'item',
        'report',
        'bundle');

    /**
     * @param User $user
     * @param String $target_type
     * @param String $target
     *
     * @throws \Exception
     */
    public function createBookmark(User $user, $target_type, $target)
    {
        try {
            $this->checkTargetType($target_type, $target);
        } catch (\Exception $e) {
            throw new \Exception('不正なリクエストです');
        }

        $bookmark = $this->getEntityManager()->getRepository('AcmeBnqaBundle:Bookmark')->findBy(array(
            'user' => $user,
            'target' => $target));

        if ($bookmark) {
            throw new \Exception('既にブックマークが登録されています');
        }

        $bookmark = new Bookmark();
        $bookmark->setTarget($target);
        $bookmark->setTargetType($target_type);
        $bookmark->setUser($user);

        $bookmarkRepository = $this->getEntityManager();
        $bookmarkRepository->persist($bookmark);
        $bookmarkRepository->flush();

    }
}
