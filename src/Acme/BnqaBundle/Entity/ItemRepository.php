<?php

namespace Acme\BnqaBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;
use Acme\BnqaBundle\Item\AmazonItem;

/**
 * ItemRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ItemRepository extends EntityRepository
{
    /**
     * @param \Acme\BnqaBundle\Item\AmazonItem $amazonItem
     *
     * @return object
     */
    public function isItemDuplicated(AmazonItem $amazonItem)
    {
        $item = $this->findOneBy(array('asinCode' => $amazonItem->getAsinCode()));
        if (!$item) {
            $manager = $this->getEntityManager();
            $item = new Item($amazonItem);
            $manager->persist($item);
            $manager->flush();
            $item = $this->findOneBy(array('asinCode' => $amazonItem->getAsinCode()));

        }

        return $item;
    }

    /**
     * @return array
     */
    public function findNullImgItems(){
        $sql = 'SELECT * FROM item WHERE img_url IS NULL AND released_date > NOW() ORDER BY released_date LIMIT 10';
        $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
        $stmt->execute();
        $result = $stmt->fetchAll();
        $list = array();
        foreach ($result as $item) {
            $list[] = $item['asinCode'];
        }
        return $list;
    }


    /**
     * @param $amazonItemId
     *
     * @return bool|object
     */
    public function fetchOneByAmazonItemId($amazonItemId)
    {
        $item = $this->findOneBy(array('asinCode' => $amazonItemId));
        if (!$item) {
            return false;
        }

        return $item;
    }

    /**
     * @return array
     */

    public function findHotItems()
    {
        $sql = 'SELECT i.*,count(i.id) AS count FROM item i  LEFT JOIN item_following f ON f.item_id = i.id WHERE i.adult = 0 GROUP BY i.id ORDER BY count(i.id) DESC LIMIT 15';

        $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
        $stmt->execute();
        $results = $stmt->fetchAll();

        return $results;
    }

    /**
     * Save item.
     *
     * @param Item $item
     *
     */
    public function saveItem(Item $item)
    {
        $manager = $this->getEntityManager();

        $other = $this->findOneBy(array('asinCode' => $item->getAsinCode()));
        if ($other) {
            return;
        }

        $manager->persist($item);
        $manager->flush();
    }

    /**
     * Fetch Latest 20 items.
     *
     * @return array
     */
    public function fetchLatest10Items()
    {
        $results = $this->getEntityManager()->createQuery('SELECT i FROM AcmeBnqaBundle:Item i WHERE i.adult = 0 ORDER BY i.id DESC')->setMaxResults(10)->getResult();

        return $results;
    }

    /**
     *
     */
    public function findItemByFollowing($user_id, $limit = 20, $page = 1)
    {
        if(!$page){
            $page=1;
        }
        $offset = $limit * ($page - 1);
        $sql = "
            SELECT i.* FROM item i
            LEFT JOIN item_following f ON f.item_id = i.id
            WHERE f.user_id = :user_id AND i.adult = 0 AND f.active_flag = true
            ORDER BY f.created_at DESC
            LIMIT ".$limit." OFFSET ".$offset;
        $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
        $stmt->bindValue("user_id", $user_id);
//        $stmt->bindValue("limit",$limit);
//        $stmt->bindValue("offset",$offset);
        $stmt->execute();
        $results = $stmt->fetchAll();

        return $results;
    }

    public function findItemByPostedReport($user_id, $limit = 20)
    {
        $sql = "
            SELECT i.* FROM item i
            LEFT JOIN report r ON r.item_id = i.id
            WHERE r.user_id = :user_id AND i.adult = 0
            GROUP BY i.id
            ORDER BY r.created_at DESC
            LIMIT
            " . $limit;
        $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
        $stmt->bindValue("user_id", $user_id);
        $stmt->execute();
        $results = $stmt->fetchAll();

        return $results;
    }
}
