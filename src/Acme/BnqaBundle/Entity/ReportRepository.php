<?php

namespace Acme\BnqaBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;
use Acme\BnqaBundle\Entity\User;

/**
 * ReportRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ReportRepository extends EntityRepository
{
  /**
   * Line public.
   *
   * @param $type
   *
   * @return array
   */
  public function findPublicTimeLine($type)
  {
    $sql = "SELECT r.*,t.label,i.asin_code,i.img_url,u.username,u.profile_img_url,i.title,i.product_group,t.name AS typeName,rm.reply_to_id ,t.label AS typeLabel, b.user_id AS isBookmarked ,m.wrong_body,rm.reply_to_id,ru.username AS reply_to_username
        FROM report r
        LEFT JOIN type t ON t.id = r.type_id
        LEFT JOIN item i ON r.item_id = i.id
        LEFT JOIN fos_user u ON u.id = r.user_id
        LEFT JOIN report_bookmark b ON b.report_id =  r.id
        LEFT JOIN misprint m ON r.misprint_id = m.id
        LEFT JOIN reply_mapping rm ON r.id = rm.reply_id
        LEFT JOIN fos_user ru ON rm.user_id = ru.id
        ";
    if ($type !== 'main')
    {
      $sql .= " WHERE t.name = :typeName";
    }
    $sql .= " ORDER BY r.id DESC LIMIT 20";
    $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
    if ($type !== 'main')
    {
      $stmt->bindValue("typeName", $type);
    }
    $stmt->execute();

    return $stmt->fetchAll();

  }

    public function findForShow($id){
        $sql = "SELECT r.*,i.asin_code,u.username,t.name AS typeName ,t.label AS typeLabel, b.user_id AS isBookmarked ,m.wrong_body,rm.reply_to_id,ru.username AS reply_to_username
        FROM report r
        LEFT JOIN type t ON t.id = r.type_id
        LEFT JOIN item i ON r.item_id = i.id
        LEFT JOIN fos_user u ON u.id = r.user_id
        LEFT JOIN report_bookmark b ON b.report_id =  r.id
        LEFT JOIN misprint m ON r.misprint_id = m.id
        LEFT JOIN reply_mapping rm ON r.id = rm.reply_id
        LEFT JOIN fos_user ru ON rm.user_id = ru.id
        WHERE r.id = :id
        ";
        $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
        $stmt->bindValue("id", $id);
        $stmt->execute();
        return $stmt->fetch();
    }

  public function countBookmarkedReportByUserId($userId)
  {
    $sql = "SELECT t.name,count(r.id) AS count
            FROM report_bookmark b
            JOIN report r ON r.id = b.report_id
            JOIN type t ON t.id = r.type_id
            WHERE b.user_id = :user_id GROUP BY r.type_id
            ";
    $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
    $stmt->bindValue("user_id", $userId);
    $stmt->execute();
    $results = $stmt->fetchAll();

    $sum = 0;
    $ary = array(
      'note'      => 0,
      'question'  => 0,
      'advice'    => 0,
      'quotation' => 0);
    foreach ($results as $result)
    {
      $ary[$result['name']] = $result['count'];
      $sum += $result['count'];
    }
    $ary['sum'] = $sum;

    return $ary;
  }

  public function countByUserId($user_id)
  {
    $sql = "
            SELECT count(id) AS count FROM report
            WHERE user_id = :user_id";
    $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
    $stmt->bindValue("user_id", $user_id);
    $stmt->execute();
    $results = $stmt->fetchAll();

    return $results[0]['count'];
  }

  public function findBookmarkedReportByUserIdAndType($userId, $type, $page)
  {
    $limit = 20;
    $offset = $limit * $page;
    $sql = "SELECT r.*,t.label,i.asin_code,i.img_url,u.username,u.profile_img_url,i.title,t.name AS typeName,t.label AS typeLabel, b.user_id AS isBookmarked
            FROM report_bookmark b
            JOIN report r ON r.id = b.report_id
            JOIN fos_user u ON u.id = b.user_id
            JOIN type t ON t.id = r.type_id
            JOIN item i ON i.id = r.item_id
            WHERE ";
    if ($type !== 'main')
    {
      $sql .= " t.name = :typeName AND ";
    }
    $sql .= " b.user_id = :user_id LIMIT " . $limit . " OFFSET " . $offset;
    $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
    $stmt->bindValue("user_id", $userId);
    if ($type !== 'main')
    {
      $stmt->bindValue("typeName", $type);
    }

    $stmt->execute();

    return $stmt->fetchAll();
  }

  public function countTypeIdByUserId($user_id)
  {
    $sql = "
            SELECT t.name,count(r.id) AS count FROM item_following f
            LEFT JOIN report r ON f.item_id = r.item_id
            LEFT JOIN type t ON r.type_id = t.id
            WHERE f.user_id = :user_id OR r.user_id = :user_id GROUP BY r.type_id";
    $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
    $stmt->bindValue("user_id", $user_id);
    $stmt->execute();
    $results = $stmt->fetchAll();

    $sum = 0;
    $ary = array(
      'note'      => 0,
      'question'  => 0,
      'advice'    => 0,
      'quotation' => 0);
    foreach ($results as $result)
    {
      $ary[$result['name']] = $result['count'];
      $sum += $result['count'];
    }
    $ary['sum'] = $sum;

    return $ary;
  }

    /**
     * Line home.
     *
     * @param $user_id
     * @param $followingType
     * @param $type
     * @param $page
     * @return array
     * @throws \Exception
     */
    public function findAllPersonalArchivesByFollowing($user_id, $followingType, $type, $page)
  {
    $limit = 20;
    $offset = $limit * $page;
    switch ($followingType)
    {
      case 'user':
        $sql = "SELECT r.*,u.username,u.profile_img_url,i.img_url,t.name AS typeName,t.label AS typeLabel, b.id AS isBookmarked
            FROM report r
            LEFT JOIN user_following f ON f.following_user_id = r.user_id
            LEFT JOIN fos_user u ON r.user_id = u.id
            LEFT JOIN item i ON i.id = r.item_id
            LEFT JOIN type t ON t.id = r.type_id
            LEFT JOIN report_bookmark b ON b.report_id =  r.id
            WHERE r.type_id = 2 AND i.adult = 0 AND f.user_id = :user_id OR u.id = :user_id
            ORDER BY r.created_at DESC
            LIMIT
            " . $limit;
        break;
      case 'item':
        $sql = "SELECT r.*,t.label,i.asin_code,i.img_url,u.username,u.profile_img_url,i.title,i.product_group,t.name AS typeName,t.label AS typeLabel, b.user_id AS isBookmarked ,m.wrong_body,rm.reply_to_id,ru.username AS reply_to_username
        FROM report r
        LEFT JOIN type t ON t.id = r.type_id
        LEFT JOIN item i ON r.item_id = i.id
        LEFT JOIN fos_user u ON u.id = r.user_id
        LEFT JOIN item_following f ON f.item_id = i.id
        LEFT JOIN report_bookmark b ON b.report_id =  r.id
        LEFT JOIN misprint m ON r.misprint_id = m.id
        LEFT JOIN reply_mapping rm ON r.id = rm.reply_id
        LEFT JOIN fos_user ru ON rm.user_id = ru.id
        WHERE ";
        if ($type !== 'main')
        {
          $sql .= " t.name = :typeName
            AND f.active_flag = 1
            AND (f.user_id = :user_id OR r.user_id = :user_id)
            OR (t.name = :typeName AND b.user_id = :user_id AND f.user_id = :user_id)
            OR (t.name = :typeName AND b.user_id = :user_id AND r.user_id = :user_id)
            GROUP BY r.id
            ORDER BY r.created_at DESC
            LIMIT
            " . $limit;
        } else
        {
          $sql .= "f.active_flag = 1 AND f.user_id = :user_id OR r.user_id = :user_id OR (b.user_id = :user_id AND f.user_id = :user_id) OR (b.user_id = :user_id AND r.user_id = :user_id)
            GROUP BY r.id
            ORDER BY r.created_at DESC
            LIMIT
            " . $limit;
        }
        break;
      default:
        throw new \Exception();
        break;
    }

    $sql = $sql . ' OFFSET ' . $offset;
    $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
    $stmt->bindValue("user_id", $user_id);
    if ($type !== 'main')
    {
      $stmt->bindValue("typeName", $type);
    }
    $stmt->execute();
    $results = $stmt->fetchAll();

    return $results;
  }


  /**
   * Line item.
   *
   * @param $asinCode
   * @param $type
   * @param $bookPage
   *
   * @return array
   */
  public function findByAsinCodeAndType($asinCode, $type, $page, $bookPage = 0, $accountUserId = null)
  {
    $limit = 20;
    $offset = $limit * $page;

    $sql = "
    SELECT r.id,u.username,u.profile_img_url,r.asin_code,i.img_url,i.title,i.product_group,t.name AS typeName,t.label AS typeLabel,r.page,r.created_at,r.body,b.user_id AS isBookmarked,m.wrong_body,rm.reply_to_id,ru.username AS reply_to_username
    FROM report r
    JOIN item i ON r.item_id = i.id
    JOIN fos_user u ON r.user_id = u.id
    LEFT JOIN misprint m ON r.misprint_id = m.id
    LEFT JOIN reply_mapping rm ON r.id = rm.reply_id
    LEFT JOIN fos_user ru ON rm.user_id = ru.id
    JOIN type t ON t.id = r.type_id
    LEFT JOIN report_bookmark b  ON r.id = b.report_id
    WHERE r.asin_code = :asin_code
    ";

    if ((int)$bookPage !== 0)
    {
      if ($type !== 'main')
      {
        $sql .= " AND r.page = :page AND t.name = :type_name ";
        if ($accountUserId !== null)
        {
          $sql .= " OR (r.page = :page AND r.asin_code = :asin_code AND b.user_id = :account_user_id AND t.name = :type_name)";
        }
        $sql .= "ORDER BY r.created_at DESC LIMIT " . $limit . " OFFSET " . $offset;
        $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
        $stmt->bindValue("asin_code", $asinCode);
        $stmt->bindValue("page", $bookPage);
        $stmt->bindValue("type_name", $type);
        if ($accountUserId !== null)
        {
          $stmt->bindValue("account_user_id", $accountUserId);
        }
        $stmt->execute();

        return $stmt->fetchAll();
      }
      $sql .= " AND r.page = :page ";
      if ($accountUserId)
      {
        $sql .= " OR (r.page = :page AND r.asin_code = :asin_code AND b.user_id = :account_user_id)";
      }

      $sql .= " ORDER BY r.created_at DESC LIMIT " . $limit . " OFFSET " . $offset;
      $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
      $stmt->bindValue("asin_code", $asinCode);
      $stmt->bindValue("page", $bookPage);
      if ($accountUserId !== null)
      {
        $stmt->bindValue("account_user_id", $accountUserId);
      }
      $stmt->execute();

      return $stmt->fetchAll();
    }
    if ($type !== 'main')
    {
      $sql .= " AND t.name = :type_name";
      if ($accountUserId)
      {
        $sql .= " OR (r.asin_code = :asin_code AND b.user_id = :account_user_id AND t.name = :type_name)";
      }
      $sql .= " ORDER BY r.created_at DESC LIMIT " . $limit . " OFFSET " . $offset;
      $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
      $stmt->bindValue("asin_code", $asinCode);
      $stmt->bindValue("type_name", $type);
      if ($accountUserId !== null)
      {
        $stmt->bindValue("account_user_id", $accountUserId);
      }
      $stmt->execute();

      return $stmt->fetchAll();
    }
    if ($accountUserId)
    {
      $sql .= " OR (r.asin_code = :asin_code AND b.user_id = :account_user_id)";
    }
    $sql .= " ORDER BY r.created_at DESC LIMIT " . $limit . " OFFSET " . $offset;

    $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
    $stmt->bindValue("asin_code", $asinCode);
    if ($accountUserId !== null)
    {
      $stmt->bindValue("account_user_id", $accountUserId);
    }
    $stmt->execute();

    return $stmt->fetchAll();
  }

  public function fetchBookmarkingFeed($user_id, $targetType, $targetNum = null, $pageNum = 0)
  {
    if ($targetType == null && $targetNum !== null)
    {
      switch ($targetNum)
      {
        case 0:
          $targetType = 'user';
          break;
        case 1:
          $targetType = 'item';
          break;
        case 2:
          $targetType = 'report';
          break;
        case 3:
          $targetType = 'bundle';
          break;
        default:
          throw new \Exception();
          break;
      }
    }
    $limit = 20;
    $offset = $limit * $pageNum;

    switch ($targetType)
    {
      case 'user':
        $sql = "
            SELECT r.*,u.username,u.profile_img_url,i.img_url,t.name AS typeName,t.label AS typeLabel FROM report r
            LEFT JOIN fos_user u ON r.user_id = u.id
            LEFT JOIN bookmark b ON b.target = u.username
            LEFT JOIN item i ON i.id = r.item_id
            LEFT JOIN type t ON t.id = r.type_id
            WHERE b.target_type = 'user' AND b.user_id = :user_id OR u.id = :user_id AND i.adult = 0
            ORDER BY r.created_at DESC
            LIMIT
            " . $limit;
        break;
      case 'item':
        $sql = "
            SELECT r.*,u.username_canonical AS username,i.title,u.profile_img_url,i.img_url,t.name AS typeName,t.label AS typeLabel FROM report r
            LEFT JOIN fos_user u ON u.id = r.user_id
            LEFT JOIN bookmark b ON r.asin_code = CAST(b.target AS CHAR)
            LEFT JOIN item i ON i.id = r.item_id
            LEFT JOIN type t ON t.id = r.type_id
            WHERE b.target_type = 'item' AND b.user_id = :user_id AND i.adult = 0
            ORDER BY r.created_at DESC
            LIMIT
            " . $limit;
        break;
      default:
        throw new \Exception();
        break;
    }
    $sql = $sql . ' OFFSET ' . $offset;
    $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
    $stmt->bindValue("user_id", $user_id);
    $stmt->execute();
    $results = $stmt->fetchAll();

    return $results;

  }

  /**
   * @param $itemId
   * @param $page
   *
   * @return array
   */
  public function fetchByItemIdAndPage($itemId, $page)
  {
    if ($page === null || $page === '0')
    {
      $query = $this->getEntityManager()->createQuery("
      SELECT r,i,u,t FROM AcmeBnqaBundle:Report r
      JOIN r.item i
      JOIN r.type t
      JOIN r.user u
      WHERE r.asinCode = :asinCode ORDER BY r.createdAt DESC");
      $query->setParameter('asinCode', $itemId);
    } else
    {
      $query = $this->getEntityManager()->createQuery("
      SELECT r,i,u,t FROM AcmeBnqaBundle:Report r
      JOIN r.item i
      JOIN r.type t
      JOIN r.user u
      WHERE r.asinCode = :asinCode AND r.page = :page ORDER BY r.createdAt DESC");
      $query->setParameters(array(
                                 'asinCode' => $itemId,
                                 'page'     => $page));
    }
    $query->setMaxResults(20);
    $results = $query->getResult();

    return $results;
  }


  public function fetchUserRelatedItems($username)
  {
    $stmt = $this->getEntityManager()->getConnection()->prepare('SELECT i.* FROM report r JOIN fos_user u ON r.user_id = u.id JOIN item i ON r.item_id = i.id  WHERE u.username_canonical = ? AND i.adult = 0 GROUP BY i.asin_code ORDER BY count(i.id) DESC LIMIT 5');
    $stmt->bindValue(1, $username);
    $stmt->execute();
    $results = $stmt->fetchAll();

    return $results;
  }

  public function findByItemIdAndTypeId()
  {

  }

  /**
   * @param string $item
   *
   * @return array
   */
  public function countReportType($asinCode, $page = null, $userId = null)
  {
    if ($page === null || $page === '0')
    {
      $sql = 'SELECT t.name ,COUNT(r.id) AS count FROM report r JOIN type t ON t.id = r.type_id  WHERE r.asin_code = :asin_code GROUP BY r.type_id';
      $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
      $stmt->bindValue('asin_code', $asinCode);
    } else
    {
      $sql = 'SELECT t.name,COUNT(r.id) AS count FROM report r JOIN type t ON t.id = r.type_id WHERE r.asin_code = :asin_code AND r.page = :page GROUP BY r.type_id';
      $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
      $stmt->bindValue('asin_code', $asinCode);
      $stmt->bindValue('page', (int)$page);
    }

    $stmt->execute();

    $results = $stmt->fetchAll();
    $sum = 0;
    $ary = array(
      'note'      => 0,
      'question'  => 0,
      'advice'    => 0,
      'misprint'  => 0,
      'quotation' => 0);
    foreach ($results as $result)
    {
      $ary[$result['name']] = $result['count'];
      $sum += $result['count'];
    }
    $ary['sum'] = $sum;

    return $ary;
  }

  /**
   * Line user.
   *
   * @param $userId
   * @param $type
   * @param $page
   *
   * @return array
   */
  public function findByUserIdAndType($userId, $type, $page, $account_user_id = null)
  {
    $limit = 20;

    $offset = $limit * $page;

    $sql = 'SELECT r.*,t.label,i.asin_code,i.img_url,u.username,u.profile_img_url,i.title,i.product_group,t.name AS typeName,t.label AS typeLabel, b.user_id AS isBookmarked ,m.wrong_body,rm.reply_to_id,ru.username AS reply_to_username
            FROM report r
            JOIN type t ON t.id = r.type_id
            JOIN fos_user u ON u.id = r.user_id
            JOIN item i ON i.id =  r.item_id
            LEFT JOIN report_bookmark b ON b.report_id =  r.id
            LEFT JOIN misprint m ON r.misprint_id = m.id
            LEFT JOIN reply_mapping rm ON r.id = rm.reply_id
            LEFT JOIN fos_user ru ON rm.user_id = ru.id
            WHERE r.user_id = :user_id ';

    if ($type !== 'main')
    {
      $sql .= " AND t.name = :type ";
      if ($account_user_id)
      {
        $sql .= " OR (r.user_id = :user_id AND b.user_id = :account_user_id AND t.name = :type)";
      }
    } else
    {
      if ($account_user_id)
      {
        $sql .= " OR (r.user_id = :user_id AND b.user_id = :account_user_id)";
      }
    }

    $sql .= "
            ORDER BY r.created_at DESC
            LIMIT
            " . $limit;

    $sql .= ' OFFSET ' . $offset;
    $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
    $stmt->bindValue("user_id", $userId);
    if ($type !== 'main')
    {
      $stmt->bindValue("type", $type);
    }
    if ($account_user_id)
    {
      $stmt->bindValue("account_user_id", $account_user_id);
    }
    $stmt->execute();
    $results = $stmt->fetchAll();

    return $results;
  }

  /**
   * @param string $itemId
   *
   * @return array
   */
  public function countPage($itemId)
  {
    $stmt = $this->getEntityManager()->getConnection()->prepare('SELECT page , COUNT(id) AS countTypeId FROM report WHERE asin_code = ?');
    $stmt->bindValue(1, $itemId);
    $stmt->execute();

    $results = $stmt->fetchAll();

    return $results;
  }


  /**
   * @param int $offset
   * @param int $limit
   *
   * @return array
   */
  public function generatePublicTimeLine($offset = 0, $limit = 20)
  {
    $results = $this->getEntityManager()->createQuery('SELECT r FROM AcmeBnqaBundle:Report r JOIN r.item i WHERE i.adult = 0 ORDER BY r.createdAt DESC')->setMaxResults($limit)->setFirstResult($offset)->getResult();

    return $results;
  }

  public function getListOfReport($item)
  {
    $results = $this->getEntityManager()->createQuery('SELECT SUBSTRING(r.body,1,120) as body, r.title ,r.userId,r.userId  r.page , r.createdAt FROM AcmeBnqaBundle:Report r WHERE r.item = :item ORDER BY r.createdAt DESC')->setParameter('item', $item)->getResult();

    return $results;
  }

  public function fetchHotItems(\DateTime $interval)
  {

    $stmt = $this->getEntityManager()->getConnection()->prepare('SELECT i.asin_code AS asinCode ,i.title title,i.img_url AS imgUrl, COUNT(r.id) as countId
      FROM report r JOIN item i ON r.item_id = i.id
      WHERE r.created_at > ? AND i.adult = 0 GROUP BY r.item_id ORDER BY countId DESC LIMIT 10');
    $stmt->bindValue(1, $interval->format('Y-m-d'));
    $stmt->execute();

    return $stmt->fetchAll();


    //      ->createQuery('SELECT i , r FROM AcmeBnqaBundle:Report r JOIN r.item i WHERE r.createdAt > :interval GROUP BY r.item')
    //      ->setParameter('interval',$interval)
    //      ->setMaxResults(10)
    //      ->getResult();

    return $results;
  }

  /**
   * @param User $user
   *
   * @return array
   */
  public function fetchItemIdsByUser(User $user)
  {
    $results = $this->getEntityManager()->createQuery('SELECT r.asinCode FROM AcmeBnqaBundle:Report r WHERE r.user = :user GROUP BY r.asinCode ORDER BY r.createdAt DESC')->setParameter('user', $user)->setMaxResults(10)->getResult();

    $itemIds = array();
    foreach ($results as $result)
    {
      array_push($itemIds, $result['asinCode']);
    }

    return $itemIds;
  }

  public function countReportTypeByUserId($user_id)
  {
    $sql = 'SELECT t.name , COUNT(r.id) AS count FROM report r JOIN type t ON t.id = r.type_id WHERE r.user_id = :user_id GROUP BY r.type_id';
    $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
    $stmt->bindValue('user_id', $user_id);

    $stmt->execute();

    $results = $stmt->fetchAll();
    $sum = 0;
    $ary = array(
      'note'      => 0,
      'question'  => 0,
      'advice'    => 0,
      'quotation' => 0,
    'misprint' => 0);
    foreach ($results as $result)
    {
      $ary[$result['name']] = $result['count'];
      $sum += $result['count'];
    }
    $ary['sum'] = $sum;

    return $ary;
  }

  public function reportsCounts($list)
  {
    $following_list = implode(' OR asin_code =  :', $list);
    $sql = 'SELECT asin_code,count(*) AS count FROM report WHERE asin_code = :' . $following_list . ' GROUP BY asin_code';
    $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
    foreach ($list as $code)
    {
      $stmt->bindValue(":" . $code, $code);
    }
    $stmt->execute();
    $results = $stmt->fetchAll();

    return $results;
  }

}
